// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
//   if (message.type === 'getPerformanceData') {
//     const performanceData = [
//       { id: 1, name: 'Load Time', value: '1.2s' },
//       { id: 2, name: 'Render Time', value: '500ms' },
//     ]
//     sendResponse(performanceData)
//   } else {
//     console.log(message.data)
//   }
//   return true
// })

// chrome.runtime.onInstalled.addListener(() => {
//   console.log('loaded')
//   chrome.scripting.registerContentScripts([
//     {
//       id: 'content-script',
//       matches: ['<all_urls>'],
//       js: ['content.js'],
//       runAt: 'document_idle',
//     },
//   ])
// })
// background.js
// background.js
// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
//     console.log('üîä Message received:', message);

//     if (message.type === 'performanceData') {
//       console.log('üìä Performance Data Received:', message.data);

//       // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ü—ñ –¥–∞–Ω—ñ –¥–æ popup
//       chrome.runtime.sendMessage({
//         type: 'performanceResult',
//         data: message.data
//       });
//     }

//     if (message.type === 'performanceError') {
//       console.log('‚ö†Ô∏è Performance Error:', message.data);
//       chrome.runtime.sendMessage({
//         type: 'performanceError',
//         data: message.data
//       });
//     }

//     return true;
//   });

// background.js
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('üîä Message received:', message)

  if (message.type === 'performanceResult') {
    console.log('üìä Performance Data Received:', message.data)

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–∞–π—Ç (–ø—Ä–æ—Ç–æ–∫–æ–ª + –¥–æ–º–µ–Ω)
    const currentOrigin = window.location.origin

    // –û—á–∏—â–∞—î–º–æ –∫–µ—à –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–∞–π—Ç—É
    chrome.browsingData.remove(
      {
        origins: [currentOrigin],
      },
      {
        cache: true,
      },
      function () {
        console.log(`–ö–µ—à –¥–ª—è —Å–∞–π—Ç—É ${currentOrigin} –æ—á–∏—â–µ–Ω–æ`)
      },
    )
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ü—ñ –¥–∞–Ω—ñ –¥–æ popup
    chrome.runtime.sendMessage({
      type: 'performanceResult',
      data: message.data,
    })
  }

  return true
})

function throttleNetwork(tabId: any, latency = 200, downloadKbps = 500, uploadKbps = 500) {
  // imitation throtling
  chrome.debugger.attach({ tabId: tabId }, '1.3', () => {
    chrome.debugger.sendCommand({ tabId: tabId }, 'Network.enable', () => {
      chrome.debugger.sendCommand({ tabId: tabId }, 'Network.emulateNetworkConditions', {
        offline: false,
        latency: latency,
        downloadThroughput: (downloadKbps * 1024) / 8,
        uploadThroughput: (uploadKbps * 1024) / 8,
        connectionType: 'cellular3g', // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
      })
    })
  })
}

function resetNetworkConditions(tabId: any) {
  // reset throtling
  chrome.debugger.sendCommand({ tabId: tabId }, 'Network.disable', () => {
    chrome.debugger.detach({ tabId: tabId }, () => {
      console.log(`Throttle disabled on tab ${tabId}`)
    })
  })
}

//–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–∫–∏–≥—É—Ç–∏ —É content.js —è —Ç–∞–∫ –¥—É–º–∞—é
// chrome.action.onClicked.addListener((tab) => {
//   // Toggle throttling
//   const isThrottled = true; // –ó—Ä–æ–±–∏ —Ç—É—Ç –ª–æ–≥—ñ–∫—É, —è–∫—â–æ —Ö–æ—á–µ—à –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è
//   if (isThrottled) {
//     throttleNetwork(tab.id, 200, 500, 500);
//   } else {
//     resetNetworkConditions(tab.id);
//   }
// });

//–ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –∑—Ä–æ–±–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–º –º–µ—Ç–æ–¥–æ–º —ñ –≤–∏–∑–∏–≤–∞—Ç–∏ –π–æ–≥–æ –æ–∫—Ä–µ–º–æ —ñ —Ç–∞–∫–æ–∂ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç—Ä–æ—Ç–ª—ñ–Ω–≥–∞ —Å–∫–æ—Ä—ñ—à–µ –∑–∞ –≤—Å—ñ –ø—ñ–¥–≤—è–∑–∞—Ç–∏ –¥–æ content.js –¥–æ –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª—ñ–∑—É –∞ —Ç–∞—É–¥–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —â–æ —é–∑–µ—Ä –Ω–∞—Ç–∏–∫–∞–≤ —É —Å–≤—ñ—Ç—á–∞—Ö –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ
